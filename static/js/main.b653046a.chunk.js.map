{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Header/Header.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Navbar/Navbar.module.css","redux/dialogs-reducer.ts","redux/sidebar-reducer.ts","redux/profile-reducer.ts","redux/users-reducer.ts","redux/redux-store.ts","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/Post/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","assets/images/profile.png","components/Users/Users.tsx","components/Users/UsersContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","UPDATE_NEW_MESSAGE_BODY","SEND_MESSAGE","initialState","messages","id","message","dialogs","name","newMessageBody","dialogsReducer","state","action","type","body","sidebarReducer","ADD_POST","UPDATE_NEW_POST_TEXT","posts","likesCount","newPostText","profileReducer","newPost","newText","FOLLOW","UNFOLLOW","SET_USERS","users","usersReducer","map","u","userId","followed","reducers","combineReducers","DialogsPage","ProfilePage","UsersPage","Sidebar","store","createStore","window","Header","className","classes","header","alt","src","Navbar","nav","item","to","activeClassName","activeLink","ProfileInfo","descriptionBlock","Post","props","MyPosts","postsElement","p","newPostElement","React","createRef","postsBlock","ref","onChange","current","text","value","updateNewPostText","onClick","addPost","MyPostsContainer","connect","dispatch","updateNewPostTextAC","Profile","News","Music","Settings","DialogItem","path","dialog","active","Message","Dialogs","dialogsPage","dialogsElements","d","messagesElements","m","dialogsItems","e","target","updateNewMessageBody","placeholder","sendMessage","DialogsContainer","Users","axios","get","then","response","setUsers","data","items","this","photos","small","userPhoto","styles","unfollow","follow","status","Component","followAC","unfollowAC","setUsersAC","App","render","UsersContainer","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.b653046a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1R1hK\",\"dialogsItems\":\"Dialogs_dialogsItems__1wdsp\",\"active\":\"Dialogs_active__3dJZw\",\"dialog\":\"Dialogs_dialog__gyL1y\",\"messages\":\"Dialogs_messages__Mfqt_\",\"message\":\"Dialogs_message__8qdnU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1E8aN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__i-OIe\",\"posts\":\"MyPosts_posts__3KCWE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__ouctn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3y3HH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__16xDv\",\"item\":\"Navbar_item__2754d\",\"activeLink\":\"Navbar_activeLink__1aUfF\"};","import {ActionsTypes, DialogsPageType} from \"./store\";\r\n\r\nconst UPDATE_NEW_MESSAGE_BODY = 'UPDATE_NEW-MESSAGE+BODY';\r\nconst SEND_MESSAGE = 'SEND_MESSAGE';\r\n\r\nlet initialState = {\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"How is your it-kamasutra?\"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 4, message: \"Yo\"},\r\n        {id: 5, message: \"Yo\"}\r\n    ],\r\n    dialogs: [\r\n        {id: 1, name: \"Dimych\"},\r\n        {id: 2, name: \"Andrey\"},\r\n        {id: 3, name: \"Sveta\"},\r\n        {id: 4, name: \"Sasha\"},\r\n        {id: 5, name: \"Victor\"},\r\n        {id: 6, name: \"Valera\"}\r\n    ],\r\n    newMessageBody: \"\"\r\n}\r\n\r\nconst dialogsReducer = (state: DialogsPageType = initialState, action: ActionsTypes): DialogsPageType => {\r\n    switch (action.type) {\r\n        case UPDATE_NEW_MESSAGE_BODY:\r\n            return {\r\n                ...state,\r\n                newMessageBody: action.body\r\n            }\r\n        case SEND_MESSAGE:\r\n            let body = state.newMessageBody;\r\n\r\n            return {\r\n                ...state,\r\n                newMessageBody: \"\",\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const updateNewMessageBodyAC = (text: string) => ({type: UPDATE_NEW_MESSAGE_BODY, body: text}) as const\r\nexport const sendMessageAC = () => ({type: SEND_MESSAGE}) as const\r\n\r\n\r\nexport default dialogsReducer;","import {ActionsTypes, RootStateType, SidebarType} from \"./store\";\r\n\r\nlet initialState = {}\r\n\r\nconst sidebarReducer = (state: SidebarType = initialState, action: ActionsTypes): SidebarType => {\r\n\r\n\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {ActionsTypes, PostType, ProfilePageType} from \"./store\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE_NEW-POST-TEXT';\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 23},\r\n        {id: 2, message: \"It's my first post\", likesCount: 14},\r\n        {id: 3, message: \"BalBla\", likesCount: 14},\r\n        {id: 4, message: \"DaDa\", likesCount: 14}\r\n    ],\r\n    newPostText: \"it=kamasutra.com\"\r\n}\r\n\r\nconst profileReducer = (state: ProfilePageType = initialState, action: ActionsTypes): ProfilePageType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            const newPost: PostType = {\r\n                id: 5,\r\n                message: state.newPostText,\r\n                likesCount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: \"\"\r\n            };\r\n        }\r\n        case UPDATE_NEW_POST_TEXT:\r\n            return {\r\n                ...state,\r\n                newPostText: action.newText\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPostAC = () => ({type: ADD_POST}) as const\r\nexport const updateNewPostTextAC = (text: string) => ({type: UPDATE_NEW_POST_TEXT, newText: text}) as const\r\n\r\nexport default profileReducer;","import {ActionsTypes, UsersPageType} from \"./store\";\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\n\r\nexport type UserType = {\r\n    id: number\r\n    photos: {\r\n        \"small\": string,\r\n        \"large\": string\r\n    }\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n}\r\n\r\nlet initialState = {\r\n    users: []\r\n}\r\n\r\nconst usersReducer = (state: UsersPageType = initialState, action: ActionsTypes): UsersPageType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n\r\n        case SET_USERS:\r\n            return {...state, users: [...state.users, ...action.users]}\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const followAC = (userId: number) => ({type: FOLLOW, userId}) as const\r\nexport const unfollowAC = (userId: number) => ({type: UNFOLLOW, userId}) as const\r\nexport const setUsersAC = (users: Array<UserType>) => ({type: SET_USERS, users}) as const\r\n\r\nexport default usersReducer;","import {combineReducers, createStore, Store} from \"redux\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    DialogsPage: dialogsReducer,\r\n    ProfilePage: profileReducer,\r\n    UsersPage: usersReducer,\r\n    Sidebar: sidebarReducer\r\n});\r\n\r\nexport type RootStateRedux = ReturnType<typeof reducers>\r\n\r\nlet store: Store = createStore(reducers);\r\n\r\ntype Window = typeof window & {store: Store}\r\n(window as Window).store = store;\r\n\r\nexport default store;","import React from \"react\";\r\nimport './Header.module.css';\r\nimport classes from './Header.module.css'\r\n\r\nfunction Header() {\r\n    return (\r\n        <header className={classes.header}>\r\n            <img  alt = \"#\" src='https://images.app.goo.gl/ZtECpbLQHThk5qat6'/>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport classes from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/profile\" activeClassName = {classes.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName = {classes.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/users\" activeClassName = {classes.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/news\" activeClassName = {classes.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/music\" activeClassName = {classes.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/settings\" activeClassName = {classes.activeLink}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport classes from './ProfileInfo.module.css';\r\n\r\n\r\nfunction ProfileInfo() {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img alt=\"#\" src=\"https://images.app.goo.gl/6yFxj7XkVWRLSSwz7\"/>\r\n            </div>\r\n            <div className={classes.descriptionBlock}>\r\n                ava+description\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport classes from './Post.module.css';\r\n\r\n\r\ntype PostsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nfunction Post(props: PostsType) {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img src='https://images.app.goo.gl/5ZCf4bKyMsx3XMHf7'/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {RefObject} from \"react\";\r\nimport Post from \"./Post/Post\";\r\nimport classes from \"./MyPosts.module.css\";\r\nimport {ActionsTypes, PostType} from \"../../../redux/store\";\r\n\r\n\r\ntype PostsType = {\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n    updateNewPostText: (text: string) => void\r\n    addPost: () => void\r\n\r\n}\r\n\r\nfunction MyPosts(props: PostsType) {\r\n\r\n    let postsElement = props.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let newPostElement: RefObject<HTMLTextAreaElement> = React.createRef();\r\n\r\n    let onAddPost = () => {\r\n        props.addPost()\r\n    }\r\n\r\n    let onPostChange = () => {\r\n        if (newPostElement.current) {\r\n            let text = newPostElement.current.value;\r\n            props.updateNewPostText(text);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h3> My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <textarea ref={newPostElement} onChange={onPostChange} value={props.newPostText}/>\r\n                </div>\r\n                <div>\r\n                    <button onClick={onAddPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={classes.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport MyPosts from \"../MyPosts\";\r\nimport {addPostAC, updateNewPostTextAC} from \"../../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {PostType} from \"../../../../redux/store\";\r\nimport {RootStateRedux} from \"../../../../redux/redux-store\";\r\n\r\ntype mapStatePropsType = {\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n}\r\n\r\ntype mapDispatchPropsType = {\r\n    updateNewPostText: (text: string) => void\r\n    addPost: () => void\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateRedux): mapStatePropsType => {\r\n    return {\r\n        posts: state.ProfilePage.posts,\r\n        newPostText: state.ProfilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: any): mapDispatchPropsType => {\r\n    return {\r\n        updateNewPostText: (text) => {\r\n            let action = updateNewPostTextAC(text);\r\n            dispatch(action)\r\n        },\r\n        addPost: () => {\r\n            dispatch(addPostAC())\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<mapStatePropsType, mapDispatchPropsType, {}, RootStateRedux>(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/Post/MyPostsContainer\";\r\n\r\n\r\n\r\ntype PropsType = {\r\n    // store: StoreReduxType\r\n}\r\n\r\nfunction Profile(props: PropsType) {\r\n    return (\r\n        <div>\r\n            <ProfileInfo/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport classes from \"./News.module.css\";\r\n\r\nfunction News() {\r\n    return(\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\nexport default News;","import React from \"react\";\r\nimport classes from \"./Music.module.css\";\r\n\r\nfunction Music() {\r\n    return(\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport classes from \"./Settings.module.css\"\r\n\r\nfunction Settings() {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React from \"react\";\r\nimport classes from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemProps = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nfunction DialogItem(props: DialogItemProps) {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={classes.dialog + '' + classes.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport classes from './../Dialogs.module.css';\r\n\r\ntype MessageProps = {\r\n    message: string\r\n}\r\n\r\nfunction Message(props: MessageProps) {\r\n    return (\r\n        <div className={classes.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React, {ChangeEvent} from \"react\";\r\nimport classes from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPageType} from \"../../redux/state\";\r\n\r\n\r\ntype PropsType = {\r\n    updateNewMessageBody: (body: string) => void\r\n    sendMessage: () => void\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\nfunction Dialogs(props: PropsType) {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>);\r\n    let messagesElements = state.messages.map(m => <Message key={m.id} message={m.message}/>);\r\n    let newMessageBody = state.newMessageBody;\r\n\r\n    let onSendMessageClick = () => {\r\n        props.sendMessage();\r\n    }\r\n\r\n    let onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let body = e.target.value;\r\n        props.updateNewMessageBody(body);\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div>\r\n                    <div><textarea value={newMessageBody} onChange={onNewMessageChange}\r\n                                   placeholder=\"Enter your message\"></textarea></div>\r\n                    <div>\r\n                        <button onClick={onSendMessageClick}>Add Message</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {sendMessageAC, updateNewMessageBodyAC} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateRedux} from \"../../redux/redux-store\";\r\nimport {DialogsPageType} from \"../../redux/store\";\r\n\r\ntype mapStatePropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\ntype mapDispatchPropsType = {\r\n    updateNewMessageBody: (body: string) => void\r\n    sendMessage: () => void\r\n}\r\n\r\n\r\n\r\nlet mapStateToProps = (state: RootStateRedux):mapStatePropsType  => {\r\n    return {\r\n        dialogsPage: state.DialogsPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: any): mapDispatchPropsType => {\r\n    return {\r\n        updateNewMessageBody: (body) => {\r\n            dispatch(updateNewMessageBodyAC(body))\r\n        },\r\n        sendMessage: () => {\r\n            dispatch(sendMessageAC())\r\n        }\r\n    }\r\n}\r\n\r\nconst DialogsContainer = connect<mapStatePropsType,mapDispatchPropsType,{}, RootStateRedux>(mapStateToProps, mapDispatchToProps)(Dialogs);\r\n\r\nexport default DialogsContainer;","export default __webpack_public_path__ + \"static/media/profile.05262aba.png\";","import React from \"react\";\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport styles from './users.module.css';\r\nimport axios from 'axios';\r\nimport userPhoto from '../../assets/images/profile.png'\r\nimport {UsersPropsType} from \"./UsersContainer\";\r\n\r\n// type UsersPropsType = {\r\n//     users: Array<UserType>\r\n//     follow: (userId: number) => void\r\n//     unfollow: (userId: number) => void\r\n//     setUsers: (users: Array<UserType>) => void\r\n// }\r\n\r\ntype UsersResponseType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\nexport class Users extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        axios.get<UsersResponseType>(\"https://social-network.samuraijs.com/api/1.0/users\")\r\n            .then(response => {\r\n                this.props.setUsers(response.data.items)\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            {this.props.users.map(u => <div key={u.id}>\r\n            <span>\r\n                <div>\r\n                    <img src={u.photos.small !== null ? u.photos.small : userPhoto} className={styles.userPhoto}/>\r\n                </div>\r\n                <div>\r\n                    {u.followed ?\r\n                        <button onClick={() => {\r\n                            this.props.unfollow(u.id)\r\n                        }}>Unfollow</button>\r\n                        : <button onClick={() => {\r\n                            this.props.follow(u.id)\r\n                        }}>Follow</button>}\r\n                </div>\r\n            </span>\r\n                <span>\r\n                <span>\r\n                    <div>{u.name}</div><div>{u.status}</div>\r\n                </span>\r\n                <span>\r\n                    <div>{'u.location.country'}</div>\r\n                      <div>{'u.location.city'}</div>\r\n                </span>\r\n            </span>\r\n            </div>)}\r\n        </div>\r\n    }\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateRedux} from \"../../redux/redux-store\";\r\nimport {Dispatch } from 'redux'\r\nimport {followAC, setUsersAC, unfollowAC, UserType} from \"../../redux/users-reducer\";\r\nimport {Users} from \"./Users\";\r\n\r\ntype mapStatePropsType = {\r\n    users: Array<UserType>\r\n}\r\n\r\ntype mapDispatchPropsType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UserType>) => void\r\n}\r\n\r\nexport type UsersPropsType = mapStatePropsType & mapDispatchPropsType\r\n\r\nlet mapStateToProps = (state: RootStateRedux): mapStatePropsType => {\r\n    return {\r\n        users: state.UsersPage.users\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchPropsType => {\r\n    return {\r\n        follow: (userId) => {\r\n            dispatch(followAC(userId));\r\n        },\r\n        unfollow: (userId) => {\r\n            dispatch(unfollowAC(userId))\r\n        },\r\n        setUsers: (users) => {\r\n            dispatch(setUsersAC(users));\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default connect<mapStatePropsType, mapDispatchPropsType, {}, RootStateRedux>(mapStateToProps, mapDispatchToProps)(Users)","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Profile from \"./components/Profile/Profile\";\nimport {Route} from \"react-router-dom\";\nimport News from './components/News/News';\nimport Music from \"./components/Music/Music\";\nimport Settings from './components/Settings/Settings';\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\n\n\nexport type PropsType = {\n    // store: StoreReduxType\n    // dispatch: (action: ActionsTypes ) => void\n}\n\nfunction App(props: PropsType) {\n\n    // const state = props.store.getState()\n\n    return (\n        <div className='app-wrapper'>\n            <Header/>\n            <Navbar/>\n            <div className=\"app-wrapper-content\">\n                <Route path='/dialogs' render={() => <DialogsContainer/>}/>\n                <Route path='/profile' render={() => <Profile/>}/>\n                <Route path='/users' render={() => <UsersContainer/>}/>\n\n                <Route path='/news' render={() => <News/>}/>\n                <Route path=\"/music\" render={() => <Music/>}/>\n                <Route path=\"/settings\" render={() => <Settings/>}/>\n            </div>\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and Users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport './index.css';\nimport store from \"./redux/redux-store\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>\n    , document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}