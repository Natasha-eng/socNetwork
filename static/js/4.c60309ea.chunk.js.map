{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/AddMessageForm/AddMessageForm.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","Auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","module","exports","DialogItem","path","id","className","dialogsStyles","dialog","active","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","messageFormStyles","messageFormContainer","Field","component","Textarea","validate","required","placeholder","messageButton","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogStyles","dialogsItems","values","sendMessage","newMessageBody","compose","DialogsPage","dispatch","sendMessageAC"],"mappings":"2MASIA,EAA6B,SAACC,GAAD,MAA4B,CACzDC,OAAQD,EAAME,KAAKD,SAGhB,SAASE,EAAuBC,GAcnC,OAHqCC,YACpCN,EAA4B,GADQM,EAT0B,SAACC,GAAW,IAElEL,EAAwBK,EAAxBL,OAAWM,EAFsD,YAEzCD,EAFyC,YAItE,OAAKL,EAEE,cAACG,EAAD,eAAsBG,IAFT,cAAC,IAAD,CAAUC,GAAG,gB,oBClBzCC,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,oBCAnND,EAAOC,QAAU,CAAC,qBAAuB,6CAA6C,cAAgB,wC,8GCiBvFC,MATf,SAAoBL,GAChB,IAAIM,EAAO,YAAcN,EAAMO,GAC/B,OACI,qBAAKC,UAAS,UAAKC,IAAcC,OAAnB,YAA6BD,IAAcE,QAAzD,SACI,cAAC,IAAD,CAAST,GAAII,EAAb,SAAoBN,EAAMY,UCAvBC,MANf,SAAiBb,GACb,OACI,qBAAKQ,UAAWC,IAAcK,QAA9B,SAAwCd,EAAMc,W,mDCHhDC,EAAcC,YAAiB,IAgBxBC,EAAsBC,YAAU,CAACC,KAAM,wBAAjBD,EAduC,SAAClB,GACvE,OACI,uBAAMoB,SAAUpB,EAAMqB,aAAcb,UAAWc,IAAkBC,qBAAjE,UAEI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAaC,IAAUC,SAAY,CAACC,IAASb,GAAcH,KAAO,iBAAiBiB,YAAc,yBAG5G,wBAAQrB,UAAWc,IAAkBQ,cAArC,wBC+BGC,MA7Bf,SAAiB/B,GACb,IAAIN,EAAQM,EAAMgC,YAEdC,EAAkBvC,EAAMwC,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAuBxB,KAAMwB,EAAExB,KAAML,GAAI6B,EAAE7B,IAA1B6B,EAAE7B,OAC5D8B,EAAmB3C,EAAM4C,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAoBzB,QAASyB,EAAEzB,SAAjByB,EAAEhC,OAQ/D,OACI,sBAAKC,UAAWgC,IAAaN,QAA7B,UAEI,qBAAK1B,UAAWgC,IAAaC,aAA7B,SACKR,IAGL,qBAAKzB,UAAWgC,IAAaF,SAA7B,SACI,8BAAMD,MAGV,cAACpB,EAAD,CAAqBG,SAjB7B,SAAuBsB,GACnB1C,EAAM2C,YAAYD,EAAOE,uB,QCYlBC,sBACX9C,aApBkB,SAACL,GACnB,MAAO,CACHsC,YAAatC,EAAMoD,YACnBnD,OAAQD,EAAME,KAAKD,WAIF,SAACoD,GACtB,MAAO,CACHJ,YAAa,SAACC,GACVG,EAASC,YAAcJ,SAW/B/C,IAFWgD,CAGbd","file":"static/js/4.c60309ea.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {RootStateRedux} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport interface withAuthRedirectType {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: RootStateRedux) => ({\r\n    isAuth: state.Auth.isAuth\r\n} as withAuthRedirectType)\r\n\r\nexport function withAuthRedirect <WCP>(WrappedComponent: React.ComponentType<WCP>){\r\n\r\n    const RedirectComponent:React.FC<withAuthRedirectType & {} > = (props) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n\r\n        return <WrappedComponent {...restProps as WCP} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<withAuthRedirectType, {}, WCP, RootStateRedux >\r\n    (mapStateToPropsForRedirect, {})(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1R1hK\",\"dialogsItems\":\"Dialogs_dialogsItems__1wdsp\",\"active\":\"Dialogs_active__3dJZw\",\"dialog\":\"Dialogs_dialog__gyL1y\",\"messages\":\"Dialogs_messages__Mfqt_\",\"message\":\"Dialogs_message__8qdnU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageFormContainer\":\"AddMessageForm_messageFormContainer__33gGL\",\"messageButton\":\"AddMessageForm_messageButton__30Hx0\"};","import React from \"react\";\r\nimport dialogsStyles from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemProps = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nfunction DialogItem(props: DialogItemProps) {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={`${dialogsStyles.dialog} ${dialogsStyles.active}`}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport dialogsStyles from './../Dialogs.module.css';\r\n\r\ntype MessageProps = {\r\n    message: string\r\n}\r\n\r\nfunction Message(props: MessageProps) {\r\n    return (\r\n        <div className={dialogsStyles.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport messageFormStyles from \"./AddMessageForm.module.css\";\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nexport const AddMessageForm: React.FunctionComponent<InjectedFormProps> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={messageFormStyles.messageFormContainer}>\r\n\r\n            <div>\r\n                <Field component = {Textarea} validate = {[required,maxLength50]} name = \"newMessageBody\" placeholder = \"Write your message\" />\r\n            </div>\r\n\r\n            <button className={messageFormStyles.messageButton}>Send</button>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageFormRedux = reduxForm({form: \"dialogAddMessageForm\"})(AddMessageForm);\r\n\r\n","import React from \"react\";\r\nimport dialogStyles from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPageType} from \"../../redux/state\";\r\nimport {AddMessageFormRedux} from \"./AddMessageForm/AddMessageForm\";\r\n\r\nexport type PropsType = {\r\n    updateNewMessageBody: (body: string) => void\r\n    sendMessage: (newMessageBody: string) => void\r\n    dialogsPage: DialogsPageType\r\n    isAuth: boolean\r\n}\r\n\r\ntype NewMessageBodyType = {\r\n    newMessageBody: string\r\n}\r\n\r\nfunction Dialogs(props: PropsType) {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>);\r\n    let messagesElements = state.messages.map(m => <Message key={m.id} message={m.message}/>);\r\n\r\n    function addNewMessage(values: any) {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    // if (!props.isAuth) return <Redirect to='/login'/>;\r\n\r\n    return (\r\n        <div className={dialogStyles.dialogs}>\r\n\r\n            <div className={dialogStyles.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={dialogStyles.messages}>\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {sendMessageAC} from \"../../redux/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateRedux} from \"../../redux/redux-store\";\r\nimport {DialogsPageType} from \"../../redux/store\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { compose } from \"redux\";\r\n\r\ntype mapStatePropsType = {\r\n    dialogsPage: DialogsPageType\r\n    isAuth: boolean\r\n}\r\n\r\ntype mapDispatchPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateRedux):mapStatePropsType  => {\r\n    return {\r\n        dialogsPage: state.DialogsPage,\r\n        isAuth: state.Auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: any): mapDispatchPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n//let AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n\r\n/*const DialogsContainer = withAuthRedirect(connect<mapStatePropsType,mapDispatchPropsType,{}, RootStateRedux>(mapStateToProps, mapDispatchToProps)(Dialogs));*/\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<mapStatePropsType,mapDispatchPropsType,{}, RootStateRedux>(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}